{"/home/travis/build/npmtest/node-npmtest-restify-mongoose/test.js":"/* istanbul instrument in package npmtest_restify_mongoose */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-restify-mongoose/lib.npmtest_restify_mongoose.js":"/* istanbul instrument in package npmtest_restify_mongoose */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_restify_mongoose = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_restify_mongoose = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-restify-mongoose/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-restify-mongoose && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_restify_mongoose */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_restify_mongoose\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_restify_mongoose.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_restify_mongoose.rollup.js'] =\n            local.assetsDict['/assets.npmtest_restify_mongoose.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_restify_mongoose.__dirname + '/lib.npmtest_restify_mongoose.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-restify-mongoose/node_modules/restify-mongoose/index.js":"'use strict';\nvar async = require('async');\nvar restify = require('restify');\nvar util = require('util');\nvar url = require('url');\nvar EventEmitter = require('events').EventEmitter;\n\nvar restifyError = function (err) {\n  if ('ValidationError' !== err.name) {\n    return err;\n  }\n\n  return new restify.InvalidContentError({\n    body: {\n      message: 'Validation failed',\n      errors: err.errors\n    }\n  });\n};\n\nvar emitEvent = function (self, event) {\n  return function (model, cb) {\n    self.emit(event, model);\n\n    if (cb) {\n      cb(undefined, model);\n    }\n  };\n};\n\nvar sendData = function (res, format, modelName, status) {\n  return function (model, cb) {\n    if (format === 'json-api') {\n      var responseObj = {};\n      responseObj[modelName] = model;\n      res.json(status, responseObj);\n    }\n    else {\n      res.send(status, model);\n    }\n    cb(undefined, model);\n  };\n};\n\nvar execQueryWithTotCount = function (query, countQuery) {\n  return function (cb) {\n    async.parallel({\n        models: function (callback) {\n          query.exec(callback);\n        },\n        count: function (callback) {\n          countQuery.count(callback);\n        }\n      },\n      function (err, results) {\n        if (err) {\n          return cb(restifyError(err));\n        }\n        else {\n          cb(null, results.models, results.count);\n        }\n      });\n\n  };\n};\n\nvar execQuery = function (query) {\n  return function (cb) {\n    query.exec(cb);\n  };\n};\n\nvar execBeforeSave = function (req, model, beforeSave) {\n  if (!beforeSave) {\n    beforeSave = function (req, model, cb) {\n      cb();\n    };\n  }\n  return function (cb) {\n    beforeSave(req, model, cb);\n  };\n};\n\nvar execSave = function (model) {\n  return function (cb) {\n    model.save(function (err, model) {\n      if (err) {\n        return cb(restifyError(err));\n      }\n      else {\n        cb(null, model);\n      }\n    });\n  };\n};\n\n/**\n * Sets the Location attribute in the response HTTP Header.\n * Used only in the POST and PATCH requests.\n *\n * URL PATTERN:\n * If PATCH: use the baseUrl + req.url\n * If POST: use the baseUrl + req.url and append model._id\n *\n * @param {Object} req Required. The request object including the req.url parameter\n * @param {Object} res Required. The response object to set the header attribute at\n * @param {Boolean} isNewResource Required. Tells if the resource is new (true, POST) or old (false, PATCH)\n * @param {String} baseUrl Optional. The base URL to prefix with\n */\nvar setLocationHeader = function (req, res, isNewResource, baseUrl) {\n  return function (model, cb) {\n    var url = baseUrl + req.url;\n    if (isNewResource) {\n      url = url + '/' + model._id;\n    }\n    res.header('Location', url);\n    cb(null, model);\n  };\n};\n\nvar buildProjections = function (req, projection) {\n  return function (models, cb) {\n    var iterator = function (model, cb) {\n      projection(req, model, cb);\n    };\n\n    async.map(models, iterator, cb);\n  };\n};\n\nvar buildProjection = function (req, projection) {\n  return function (model, cb) {\n    if (!model) {\n      return cb(new restify.ResourceNotFoundError(req.params.id));\n    }\n\n    projection(req, model, cb);\n  };\n};\n\nvar parseCommaParam = function(commaParam) {\n  return commaParam.replace(/,/g, ' ');\n};\n\nvar applyPageLinks = function (req, res, page, pageSize, baseUrl) {\n  function makeLink(page, rel) {\n    var path = url.parse(req.url, true);\n    path.query.p = page;\n    delete path.search; // required for url.format to re-generate querystring\n    var href = baseUrl + url.format(path);\n    return util.format('<%s>; rel=\"%s\"', href, rel);\n  }\n\n  return function applyPageLinksInner(models, totalCount, cb) {\n    // rel: first\n    var link = makeLink(0, 'first');\n\n    // rel: prev\n    if (page > 0) {\n      link += ', ' + makeLink(page - 1, 'prev');\n    }\n\n    // rel: next\n    var moreResults = models.length > pageSize;\n    if (moreResults) {\n      models.pop();\n\n      link += ', ' + makeLink(page + 1, 'next');\n    }\n\n    // rel: last\n    var lastPage = 0;\n    if (pageSize > 0) {\n      lastPage = Math.ceil(totalCount / pageSize) - 1;\n      link += ', ' + makeLink(lastPage, 'last');\n    }\n\n    res.setHeader('link', link);\n\n    cb(null, models, totalCount);\n  };\n};\n\nvar applyTotalCount = function (res) {\n  return function applyTotalCountInner(models, totalCount, cb) {\n    res.setHeader('X-Total-Count', totalCount);\n\n    cb(null, models);\n  };\n};\n\nvar applySelect = function(query, options, req){\n  //options select overrides request select\n  var select = options.select || req.query.select;\n  if(select){\n    query = query.select(parseCommaParam(select));\n  }\n};\n\nvar applyPopulate = function(query, options, req){\n  var populate = req.query.populate || options.populate;\n  if (populate) {\n    query = query.populate(parseCommaParam(populate));\n  }\n};\n\nvar applySort = function(query, options, req){\n  var sort = req.query.sort || options.sort;\n  if (sort) {\n    query = query.sort(parseCommaParam(sort));\n  }\n};\n\nvar Resource = function (Model, options) {\n  EventEmitter.call(this);\n  this.Model = Model;\n\n  this.options = options || {};\n  this.options.queryString = this.options.queryString || '_id';\n  this.options.pageSize = this.options.pageSize || 100;\n  this.options.maxPageSize = this.options.maxPageSize || 100;\n  this.options.baseUrl = this.options.baseUrl || '';\n  this.options.outputFormat = this.options.outputFormat || 'regular';\n  this.options.modelName = this.options.modelName || Model.modelName;\n  this.options.listProjection = this.options.listProjection || function (req, item, cb) {\n      cb(null, item);\n    };\n  this.options.detailProjection = this.options.detailProjection || function (req, item, cb) {\n      cb(null, item);\n    };\n};\n\nutil.inherits(Resource, EventEmitter);\n\nResource.prototype.query = function (options) {\n  var self = this;\n\n  options = options || {};\n  options.pageSize = options.pageSize || this.options.pageSize;\n  options.maxPageSize = options.maxPageSize || this.options.maxPageSize;\n  options.baseUrl = options.baseUrl || this.options.baseUrl;\n  options.projection = options.projection || this.options.listProjection;\n  options.outputFormat = options.outputFormat || this.options.outputFormat;\n  options.modelName = options.modelName || this.options.modelName;\n  options.populate = options.populate || this.options.populate;\n  options.select = options.select || this.options.select;\n  options.sort = options.sort || this.options.sort;\n\n  return function (req, res, next) {\n    var query = self.Model.find({});\n    var countQuery = self.Model.find({});\n\n    if (req.query.q) {\n      try {\n        var q = JSON.parse(req.query.q);\n        query = query.where(q);\n        countQuery = countQuery.where(q);\n      } catch (err) {\n        return res.send(400, {message: 'Query is not a valid JSON object', errors: err});\n      }\n    }\n\n    applySelect(query, options, req);\n    applyPopulate(query, options, req);\n    applySort(query, options, req);\n\n    if (self.options.filter) {\n      query = query.where(self.options.filter(req, res));\n      countQuery = countQuery.where(self.options.filter(req, res));\n    }\n    \n    var page = Number(req.query.p) >= 0 ? Number(req.query.p) : 0;\n\n    // pageSize parameter in queryString overrides one in the code. Must be number between [1-options.maxPageSize]\n    var requestedPageSize = Number(req.query.pageSize) > 0 ? Number(req.query.pageSize) : options.pageSize;\n    var pageSize = Math.min(requestedPageSize, options.maxPageSize);\n\n    query.skip(pageSize * page);\n    query.limit(pageSize + 1);\n\n    async.waterfall([\n      execQueryWithTotCount(query, countQuery),\n      applyPageLinks(req, res, page, pageSize, options.baseUrl),\n      applyTotalCount(res),\n      buildProjections(req, options.projection),\n      emitEvent(self, 'query'),\n      sendData(res, options.outputFormat, options.modelName)\n    ], next);\n  };\n};\n\nResource.prototype.detail = function (options) {\n  var self = this;\n\n  options = options || {};\n  options.projection = options.projection || this.options.detailProjection;\n  options.outputFormat = options.outputFormat || this.options.outputFormat;\n  options.modelName = options.modelName || this.options.modelName;\n  options.populate = options.populate || this.options.populate;\n  options.select = options.select || this.options.select;\n\n  return function (req, res, next) {\n    var find = {};\n    find[self.options.queryString] = req.params.id;\n\n    var query = self.Model.findOne(find);\n\n    applySelect(query, options, req);\n    applyPopulate(query, options, req);\n\n    if (self.options.filter) {\n      query = query.where(self.options.filter(req, res));\n    }\n\n    async.waterfall([\n      execQuery(query),\n      buildProjection(req, options.projection),\n      emitEvent(self, 'detail'),\n      sendData(res, options.outputFormat, options.modelName)\n    ], next);\n  };\n};\n\nResource.prototype.insert = function (options) {\n  var self = this;\n\n  options = options || {};\n  options.baseUrl = options.baseUrl || this.options.baseUrl;\n  options.beforeSave = options.beforeSave || this.options.beforeSave;\n  options.outputFormat = options.outputFormat || this.options.outputFormat;\n  options.modelName = options.modelName || this.options.modelName;\n\n  return function (req, res, next) {\n    var model = new self.Model(req.body);\n    async.waterfall([\n      execBeforeSave(req, model, options.beforeSave),\n      execSave(model),\n      setLocationHeader(req, res, true, options.baseUrl),\n      emitEvent(self, 'insert'),\n      sendData(res, options.outputFormat, options.modelName, 201)\n    ], next);\n  };\n};\n\nResource.prototype.update = function (options) {\n  var self = this;\n\n  options = options || {};\n  options.baseUrl = options.baseUrl || this.options.baseUrl;\n  options.beforeSave = options.beforeSave || this.options.beforeSave;\n  options.outputFormat = options.outputFormat || this.options.outputFormat;\n  options.modelName = options.modelName || this.options.modelName;\n\n  return function (req, res, next) {\n    var find = {};\n    find[self.options.queryString] = req.params.id;\n\n    var query = self.Model.findOne(find);\n\n    if (self.options.filter) {\n      query = query.where(self.options.filter(req, res));\n    }\n\n    query.exec(function (err, model) {\n      if (err) {\n        return next(err);\n      }\n\n      if (!model) {\n        return next(new restify.ResourceNotFoundError(req.params.id));\n      }\n\n      if (!req.body) {\n        return next(new restify.InvalidContentError('No update data sent'));\n      }\n\n      model.set(req.body);\n\n      async.waterfall([\n        execBeforeSave(req, model, options.beforeSave),\n        execSave(model),\n        setLocationHeader(req, res, false, options.baseUrl),\n        emitEvent(self, 'update'),\n        sendData(res, options.outputFormat, options.modelName)\n      ], next);\n    });\n  };\n};\n\nResource.prototype.remove = function () {\n  var self = this;\n  var emitRemove = emitEvent(self, 'remove');\n\n  return function (req, res, next) {\n    var find = {};\n    find[self.options.queryString] = req.params.id;\n\n    var query = self.Model.findOne(find);\n\n    if (self.options.filter) {\n      query = query.where(self.options.filter(req, res));\n    }\n\n    query.exec(function (err, model) {\n      if (err) {\n        return next(err);\n      }\n\n      if (!model) {\n        return next(new restify.ResourceNotFoundError(req.params.id));\n      }\n\n      model.remove(function (err) {\n        if (err) {\n          return next(err);\n        }\n\n        res.send(200, model);\n        emitRemove(model, next);\n      });\n    });\n  };\n};\n\nResource.prototype.serve = function (path, server, options) {\n\n  options = options || {};\n\n  var handlerChain = function handlerChain(handler, before, after) {\n    var handlers = [];\n\n    if (before) {\n      handlers = handlers.concat(before);\n    }\n\n    handlers.push(handler);\n\n    if (after) {\n      handlers = handlers.concat(after);\n    }\n\n    return handlers;\n  };\n\n  var closedPath = path[path.length - 1] === '/' ? path : path + '/';\n\n  server.get(\n    path,\n    handlerChain(this.query(), options.before, options.after)\n  );\n  server.get(\n    closedPath + ':id',\n    handlerChain(this.detail(), options.before, options.after)\n  );\n  server.post(\n    path,\n    handlerChain(this.insert(), options.before, options.after)\n  );\n  server.del(\n    closedPath + ':id',\n    handlerChain(this.remove(), options.before, options.after)\n  );\n  server.patch(\n    closedPath + ':id',\n    handlerChain(this.update(), options.before, options.after)\n  );\n};\n\nmodule.exports = function (Model, options) {\n  if (!Model) {\n    throw new Error('Model argument is required');\n  }\n\n  return new Resource(Model, options);\n};\n","/home/travis/build/npmtest/node-npmtest-restify-mongoose/node_modules/restify-mongoose/_release.js":"var shell = require('shelljs');\n\nif (exec('git status --porcelain').stdout) {\n  console.error('Git working directory not clean.');\n  process.exit(2);\n}\n\nvar versionIncrement = process.argv[process.argv.length -1];\n\nif (versionIncrement != 'major' && versionIncrement != 'minor' && versionIncrement != 'patch') {\n  console.error('Usage: node release.js major|minor|patch');\n  process.exit(1);\n}\n\nexec('npm version ' + versionIncrement);\n\nexec('npm test');\nexec('git push');\nexec('git push --tags');\nexec('npm publish');\n\nfunction exec(cmd) {\n  var ret = shell.exec(cmd, { silent : true });\n\n  if (ret.code != 0) {\n    console.error(ret.stderr);\n    process.exit(1);\n  }\n\n  return ret;\n}\n"}